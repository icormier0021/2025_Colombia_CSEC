Q75             = survey_quantile(!!sym(var), 0.75, na.rm = TRUE, vartype = "ci")[[1]],
TotalRespond    = sum(!is.na(!!sym(var))),
TotalNA         = sum(is.na(!!sym(var))),
Total           = survey_total(!!sym(var), na.rm = TRUE, vartype = c("se", "cv", "ci"))
) %>%
mutate(
Variable = var,
`Variable Label` = var_label
) %>%
rename(
`Mean(SE)` = Mean_se,
`Mean(CV)` = Mean_cv,
`Mean(Low CI 95%)` = Mean_low,
`Mean(Upp CI 95%)` = Mean_upp,
`Mean(DeEff)` = Mean_deff,
`Total(SE)` = Total_se,
`Total(CV)` = Total_cv,
`Total(Low CI 95%)` = Total_low,
`Total(Upp CI 95%)` = Total_upp
)
} else {
result <- design %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
summarise(
Mean = survey_mean(!!sym(var), na.rm = TRUE, vartype=c("se", "cv", "ci"), deff = TRUE),
Q25             = survey_quantile(!!sym(var), 0.25, na.rm = TRUE, vartype = "ci")[[1]],
Median          = survey_quantile(!!sym(var), 0.50, na.rm = TRUE, vartype = "ci")[[1]],
Q75             = survey_quantile(!!sym(var), 0.75, na.rm = TRUE, vartype = "ci")[[1]],
TotalRespond    = sum(!is.na(!!sym(var))),
TotalNA         = sum(is.na(!!sym(var)))
) %>%
mutate(
Variable = var,
`Variable Label` = var_label
) %>%
rename(
`Mean(SE)` = Mean_se,
`Mean(CV)` = Mean_cv,
`Mean(Low CI 95%)` = Mean_low,
`Mean(Upp CI 95%)` = Mean_upp,
`Mean(DeEff)` = Mean_deff
)
}
result %>%
select(Variable, `Variable Label`, everything())
}
calculateCount <- function(var, design, filter_expr = NULL){
f <- rlang::enquo(filter_expr)
var_label <- attr(design$variables[[var]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
design %>%
drop_na(!!sym(var)) %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
group_by(!!sym(var)) %>%
survey_count(!!sym(var), name = 'N', vartype = c("se", "ci", "cv")) %>%
mutate(
Variable = var,
`Variable Label` = var_label
) %>%
rename(
Answer = !!sym(var),
`N(SE)` = N_se,
`N (Lower CI 95%)` = N_low,
`N (Upper CI 95%)` = N_upp,
`N(CV)` = N_cv
) %>%
mutate(
Answer = recode(
Answer,
`0` = "No",
`1` = "Yes",
.default = as.character(Answer)
)
) %>%
select(Variable, `Variable Label`, everything())
}
calculateProp <- function(var, design, filter_expr = NULL) {
f <- rlang::enquo(filter_expr)
var_label <- attr(design$variables[[var]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
tryCatch(
{
design %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
drop_na(!!sym(var)) %>%
group_by(!!sym(var)) %>%
summarise(
Prop            = survey_prop(x = !!sym(var), na.rm = TRUE, prop_method = "xlogit", vartype= c("se", "ci", "cv")),
TotalRespond    = sum(!is.na(!!sym(var))),
TotalNA         = sum(is.na(!!sym(var)))
) %>%
ungroup() %>%
rename(
Answer = !!sym(var),
`Prop (SE)` = Prop_se,
`Prop (Lower CI 95%)` = Prop_low,
`Prop (Upper CI 95%)` = Prop_upp,
`Prop (CV)` = Prop_cv
) %>%
mutate(
Variable = var,
`Variable Label` = var_label,
Answer = as.character(Answer),
Answer = recode(
Answer,
`0` = "No",
`1` = "Yes",
.default = Answer
),
Prop = Prop*100,
`Prop (SE)` = `Prop (SE)`*100,
`Prop (Lower CI 95%)` = `Prop (Lower CI 95%)`*100,
`Prop (Upper CI 95%)`= `Prop (Upper CI 95%)`*100
) %>%
select(Variable,`Variable Label`, everything())
},
error = function(e) {
warning("Error summarising ", var, ": ", e$message)
tibble(
Variable           = var,
`Variable Label`   = var_label,
Answer             = NA_character_,
Prop               = NA_real_,
`Prop(SE)`         = NA_real_,
`Prop (Lower CI 95%)`= NA_real_,
`Prop (Upper CI 95%)`= NA_real_,
`Prop(CV)`         = NA_real_,
TotalRespond       = NA_integer_,
TotalNA            = NA_integer_
)
}
)
}
calculateCrossTab <- function(var, group, design, filter_expr = NULL){
f <- rlang::enquo(filter_expr)
df <- design %>%
drop_na(!!sym(var), !!sym(group)) %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) }
var_label <- attr(design$variables[[var]], "label")
group_label <- attr(design$variables[[group]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
if (is.null(group_label)) group_label <- "No Label Specified"
n_levels_var <- n_distinct(df$variables[[var]])
n_levels_grp <- n_distinct(df$variables[[group]])
if (nrow(df) == 0 || n_levels_var < 2 || n_levels_grp < 2) {
return(tibble::tibble(
Variable = var,
`Variable Label` = var_label,
`Grouping Variable` = group,
`Group Label` = group_label,
`Group Levels` = NA,
`Variable Levels` = NA,
Count = NA_real_,
`Count(SE)` = NA_real_,
`Count (Lower CI 95%)` = NA_real_,
`Count (Upper CI 95%)` = NA_real_,
`Count(CV)` = NA_real_
))
}
df %>%
survey_count(!!sym(group), !!sym(var), name = 'Count', vartype = c("se", "ci", "cv")) %>%
mutate(
Variable = var,
`Grouping Variable` = group,
`Variable Label` = var_label,
`Group Label` = group_label
) %>%
rename(
`Variable Levels` = !!sym(var),
`Group Levels` = !!sym(group),
`Count(SE)` = Count_se,
`Count (Lower CI 95%)` = Count_low,
`Count (Upper CI 95%)` = Count_upp,
`Count(CV)` = Count_cv
) %>%
mutate(
`Variable Levels` = recode(as.character(`Variable Levels`), `0` = "No", `1` = "Yes"),
`Group Levels` = recode(as.character(`Group Levels`), `0` = "No", `1` = "Yes")
) %>%
select(Variable,`Variable Label`,`Grouping Variable`, `Group Label`, `Group Levels`, `Variable Levels`, everything())
}
calculatePropGrouped <- function(var, group, design, filter_expr = NULL) {
f <- rlang::enquo(filter_expr)
var_label <- attr(design$variables[[var]], "label")
group_label <- attr(design$variables[[group]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
if (is.null(group_label)) group_label <- "No Label Specified"
tryCatch(
{
design %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
drop_na(!!sym(var), !!sym(group)) %>%
group_by(!!sym(group),!!sym(var) ) %>%
summarise(
Prop = survey_prop(x = !!sym(var), na.rm = TRUE, prop_method = "xlogit", vartype= c("se", "ci", "cv"))
) %>%
ungroup() %>%
mutate(
Variable = var,
`Grouping Variable` = group,
`Variable Label` = var_label,
`Group Label` = group_label
) %>%
rename(
`Variable Levels` = !!sym(var),
`Group Levels` = !!sym(group),
`Prop(SE)` = Prop_se,
`Prop (Lower CI 95%)` = Prop_low,
`Prop (Upper CI 95%)` = Prop_upp,
`Prop(CV)` = Prop_cv
) %>%
mutate(
`Variable Levels` = recode(as.character(`Variable Levels`), `0` = "No", `1` = "Yes"),
`Group Levels` = recode(as.character(`Group Levels`), `0` = "No", `1` = "Yes"),
Prop = Prop*100,
`Prop (SE)` = `Prop (SE)`*100,
`Prop (Lower CI 95%)` = `Prop (Lower CI 95%)`*100,
`Prop (Upper CI 95%)`= `Prop (Upper CI 95%)`*100
) %>%
select(Variable,`Variable Label`,`Grouping Variable`, `Group Label`, `Group Levels`, `Variable Levels`, everything())
},
error = function(e) {
warning("Error summarising ", var, ": ", e$message)
tibble(
Variable           = var,
`Variable Label`   = var_label,
`Grouping Variable` =group,
`Group Label` = group_label,
`Group Levels`= NA_character_,
`Variable Levels` = NA_character_,
Prop               = NA_real_,
`Prop(SE)`         = NA_real_,
`Prop (Lower CI 95%)`= NA_real_,
`Prop (Upper CI 95%)`= NA_real_,
`Prop(CV)`         = NA_real_
)
}
)
}
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECProp)
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age18Plus == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECProp)
TEST <- df %>%
age1 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1)
age2 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17)
age3 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & SexTransactAge > 17)
summary(age1)
count(age1)
count(age2)
count(age3)
age1 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & !is.na(SexTransactAge))
count(age1)
count(age2)
count(age3)
age3 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & SexTransactAge > 17 & !is.na(SexTransactAge))
count(age1)
count(age3)
dfTest1a <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age13to17 == 1                         ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
dfTest1b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17  ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
View(dfTest1a)
View(dfTest1b)
table(dfTest1a)
table(dfTest1b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1   ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge > 0  ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge < 24  ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge < 30 ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge < 18 ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest1a <- df %>%
mutate(
CSEC = case_when(
is.na(SexTransact) | is.na(Age13to17) | is.na(Age18Plus) | is.na(SexTransactAge) ~ NA_real_,
SexTransact == 1 & Age13to17 == 1 ~ 1,
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17 ~ 1,
TRUE ~ 0
)
) %>%
select(CSEC)
table(dfTest1a)
dfTest1a <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age13to17 == 1 ~ 1,
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17 & !is.na(SexTransactAge) ~ 1,
TRUE ~ 0
)
) %>%
select(CSEC)
table(dfTest1a)
dfTest1b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age13to17 == 1 ~ 1,
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17  ~ 1,
TRUE ~ 0
)
) %>%
select(CSEC)
table(dfTest1b)
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECProp)
CSECCount <- c("SexTransact", "SexTransactType", "SexTransactTourist") %>%
map( ~ calculateCount(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & CSEC == 1
)
) %>%
list_rbind()
View(CSECProp)
View(CSECProp)
View(CSECProp)
View(CSECCount)
CSECCount <- c("SexTransact", "SexTransactType", "SexTransactTourist") %>%
map( ~ calculateCount(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1
)
) %>%
list_rbind()
CSECCount <- c("CSEC") %>%
map( ~ calculateCount(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & !is.na(SexTransact)
)
) %>%
list_rbind()
View(CSECProp)
View(CSECCount)
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age18Plus == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECCount)
View(CSECProp)
library(fs)
#knitr::opts_knit$set(root.dir = fs::path_dir(knitr::current_input()))
options(repos = c(CRAN = "https://cloud.r-project.org"))
knitr::opts_chunk$set(echo = TRUE)
packages <- c("survey", "haven", "dplyr", "labelled", "tidyr", "DT", "skimr", "ggplot2", "knitr", "kableExtra", "svyweight", "purrr", "srvyr", "tibble", "here", "naniar")
if(!require("pacman"))install.packages("pacman")
pacman::p_load(char = packages, character.only = TRUE)
VACSData <- read_sav(here::here("rawdata", "Colombia_VACS_national_data.sav"))
rawDF <- VACSData %>%
select(
DEPT, MUNI, PSU, USM, HH, VACS_ID, Wght_final, H6, H7H, H18, H19, H19A, H54, H56, H58, H19B,
H20, Sex, Q2, Q2A, Q3, Q7AA, Q13, Q19, Q29, Q58, Q70, Q71, Q306, Q21, Q31, Q7, Q25, Q35,
Q7AB, Q7AC, Q7AD,
Q36A, Q36B, Q36C, Q36D, Q36E,
Q59, Q80, Q82, Q84, Q86,
Q407, Q409, Q500, Q600,
Q700A, Q700B, Q800A, Q800B,
Q1205, Q1207, Q1208, Q1209, Q1210, Q1200,
Q100A, Q100B, Q100C, Q100D,
Q116A, Q116B, Q116C, Q116D,
Q128A, Q128B, Q128C, Q128D,
Q142A, Q142B, Q142C, Q142D,
Q300A, Q300B, Q300C, Q300D,
Q305A, Q305B, Q305C, Q305D, Q305E, Q305F,
Q1206A, Q1206B, Q1206C, Q1206D, Q1206E, Q1206F,
Q400B, Q408, Q417, Q504, Q505, Q503
)
#ggsave(
#  filename = "missing_data_plot.png",
#  plot = miss_plot,
#  width = 44,        # increase if needed (in inches)
#  height = 8,        # height in inches
#  dpi = 500          # high resolution
#)
# Calculate missing values and completion rates for all variables
missing_summary <- rawDF %>%
summarise_all(~sum(is.na(.))) %>%
pivot_longer(everything(), names_to = "Variable_Name", values_to = "n_Missing") %>%
mutate(
Total_Observations = nrow(rawDF),
Completion_Rate = round(((Total_Observations - n_Missing) / Total_Observations) * 100, 2)
)
# Create mapping for cleaned variable names
cleaned_var_mapping <- c(
"H54" = "ParentAbs",
"H56" = "ChildOutHome",
"H58" = "ChildStreet",
"H19B" = "VictimRegType",
"Q7AA" = "FoodSecure",
"Q306" = "BullyVic",
"Q7AB" = "BasicSecure",
"Q7AC" = "HousingSecure",
"Q7AD" = "ExtraMoneySecure",
"Q36C" = "ParMonitAftSchool",
"Q409" = "FirstSexWanted",
"Q500" = "SexTransact",
"Q1209" = "SuicideAttempt",
"Q305A" = "IPVEmot1",
"Q305B" = "IPVEmot2",
"Q305C" = "IPVEmot3",
"Q305D" = "IPVEmot4",
"Q305E" = "IPVEmot5",
"Q305F" = "IPVEmot6",
"Q400B" = "PhysCorp",
"Q408" = "SexInitAge",
"Q417" = "SexPartners",
"Q504" = "SexTransactAge",
"Q505" = "SexTransactInitAge"
)
# Filter for variables with completion rate < 75%
low_completion <- missing_summary %>%
filter(Completion_Rate < 75) %>%
mutate(
Cleaned_Var_Name = ifelse(Variable_Name %in% names(cleaned_var_mapping),
cleaned_var_mapping[Variable_Name],
Variable_Name)
) %>%
select(`Variable Name` = Variable_Name,
`Cleaned Var Name` = Cleaned_Var_Name,
`n Missing` = n_Missing,
`Total Observations` = Total_Observations,
`Completion Rate (%)` = Completion_Rate)
# Display the table
if(nrow(low_completion) > 0) {
knitr::kable(low_completion,
caption = "Variables with Completion Rate < 75%",
align = c("l", "l", "c", "c", "c"))
} else {
cat("No variables have completion rates below 75%")
}
