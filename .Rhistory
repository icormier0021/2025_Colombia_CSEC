ggsave(
filename = temp_file,
plot = miss_by_age,
width = 20,
height = 6,
dpi = 100
)
cat(paste0('<img src="', temp_file, '" style="display: block; max-width: none; width: 2000px;">'))
cat('</div>')
miss_by_age
library(fs)
#knitr::opts_knit$set(root.dir = fs::path_dir(knitr::current_input()))
options(repos = c(CRAN = "https://cloud.r-project.org"))
knitr::opts_chunk$set(echo = TRUE)
packages <- c("survey", "haven", "dplyr", "labelled", "tidyr", "DT", "skimr", "ggplot2", "knitr", "kableExtra", "svyweight", "purrr", "srvyr", "tibble", "here", "naniar")
if(!require("pacman"))install.packages("pacman")
pacman::p_load(char = packages, character.only = TRUE)
VACSData <- read_sav(here::here("rawdata", "Colombia_VACS_national_data.sav"))
library(fs)
#knitr::opts_knit$set(root.dir = fs::path_dir(knitr::current_input()))
options(repos = c(CRAN = "https://cloud.r-project.org"))
knitr::opts_chunk$set(echo = TRUE)
packages <- c("survey", "haven", "dplyr", "labelled", "tidyr", "DT", "skimr", "ggplot2", "knitr", "kableExtra", "svyweight", "purrr", "srvyr", "tibble", "here", "naniar")
if(!require("pacman"))install.packages("pacman")
pacman::p_load(char = packages, character.only = TRUE)
df <- readRDS(here::here("data", "Colombia_VACS_National_data_CLEANED.rds"))
vacsDesign <- df %>%
as_survey_design(
id = PSU,
strata = DEPT,
weights = Wght_final,
nest = TRUE
)
test1 <- table(vacsDesign$variables[["SexTransact"]], vacsDesign$variables[["SexAct"]], useNA = "always")
print(test1)
#the design variables show that
test2 <- table(VACSData$Q500,VACSData$Q407, useNA = "always")
print(test2)
test3 <- table(df$SexTransact, df$SexAct, useNA = "always")
print(test3)
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
createKable <- function(tbl, title = "My Title"){
boundary_rows <- which(
c(FALSE, tbl[[1]][-1] != tbl[[1]][-length(tbl[[1]])])
)
align_vec <- c("l", rep("r", ncol(tbl) - 1))
kable(
tbl,
col.names = names(tbl),
align     = align_vec,
digits    = 4,
format    = "html",
caption   = title
) %>%
kable_styling(
bootstrap_options = c("condensed", "bordered"),
full_width        = FALSE,
position          = "left"
) %>%
column_spec(
which(sapply(tbl, is.numeric)),
width     = "60px",
extra_css = "padding-left:6px; padding-right:6px;"
) %>%
row_spec(
boundary_rows,
extra_css = "border-top: 3px solid black;"
) %>%
scroll_box(width = "1000px", height = "400px")
}
#Helper functions for calculating survey means, quantiles, totals, proportions and counts
calculateMean_Total <- function(var, design, filter_expr = NULL, total = FALSE) {
f <- rlang::enquo(filter_expr)
var_label <- attr(design$variables[[var]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
# Conditionally build the summarise call
if (total) {
result <- design %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
summarise(
Mean = survey_mean(!!sym(var), na.rm = TRUE, vartype=c("se", "cv", "ci"), deff = TRUE),
Q25             = survey_quantile(!!sym(var), 0.25, na.rm = TRUE, vartype = "ci")[[1]],
Median          = survey_quantile(!!sym(var), 0.50, na.rm = TRUE, vartype = "ci")[[1]],
Q75             = survey_quantile(!!sym(var), 0.75, na.rm = TRUE, vartype = "ci")[[1]],
TotalRespond    = sum(!is.na(!!sym(var))),
TotalNA         = sum(is.na(!!sym(var))),
Total           = survey_total(!!sym(var), na.rm = TRUE, vartype = c("se", "cv", "ci"))
) %>%
mutate(
Variable = var,
`Variable Label` = var_label
) %>%
rename(
`Mean(SE)` = Mean_se,
`Mean(CV)` = Mean_cv,
`Mean(Low CI 95%)` = Mean_low,
`Mean(Upp CI 95%)` = Mean_upp,
`Mean(DeEff)` = Mean_deff,
`Total(SE)` = Total_se,
`Total(CV)` = Total_cv,
`Total(Low CI 95%)` = Total_low,
`Total(Upp CI 95%)` = Total_upp
)
} else {
result <- design %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
summarise(
Mean = survey_mean(!!sym(var), na.rm = TRUE, vartype=c("se", "cv", "ci"), deff = TRUE),
Q25             = survey_quantile(!!sym(var), 0.25, na.rm = TRUE, vartype = "ci")[[1]],
Median          = survey_quantile(!!sym(var), 0.50, na.rm = TRUE, vartype = "ci")[[1]],
Q75             = survey_quantile(!!sym(var), 0.75, na.rm = TRUE, vartype = "ci")[[1]],
TotalRespond    = sum(!is.na(!!sym(var))),
TotalNA         = sum(is.na(!!sym(var)))
) %>%
mutate(
Variable = var,
`Variable Label` = var_label
) %>%
rename(
`Mean(SE)` = Mean_se,
`Mean(CV)` = Mean_cv,
`Mean(Low CI 95%)` = Mean_low,
`Mean(Upp CI 95%)` = Mean_upp,
`Mean(DeEff)` = Mean_deff
)
}
result %>%
select(Variable, `Variable Label`, everything())
}
calculateCount <- function(var, design, filter_expr = NULL){
f <- rlang::enquo(filter_expr)
var_label <- attr(design$variables[[var]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
design %>%
drop_na(!!sym(var)) %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
group_by(!!sym(var)) %>%
survey_count(!!sym(var), name = 'N', vartype = c("se", "ci", "cv")) %>%
mutate(
Variable = var,
`Variable Label` = var_label
) %>%
rename(
Answer = !!sym(var),
`N(SE)` = N_se,
`N (Lower CI 95%)` = N_low,
`N (Upper CI 95%)` = N_upp,
`N(CV)` = N_cv
) %>%
mutate(
Answer = recode(
Answer,
`0` = "No",
`1` = "Yes",
.default = as.character(Answer)
)
) %>%
select(Variable, `Variable Label`, everything())
}
calculateProp <- function(var, design, filter_expr = NULL) {
f <- rlang::enquo(filter_expr)
var_label <- attr(design$variables[[var]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
tryCatch(
{
design %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
drop_na(!!sym(var)) %>%
group_by(!!sym(var)) %>%
summarise(
Prop            = survey_prop(x = !!sym(var), na.rm = TRUE, prop_method = "xlogit", vartype= c("se", "ci", "cv")),
TotalRespond    = sum(!is.na(!!sym(var))),
TotalNA         = sum(is.na(!!sym(var)))
) %>%
ungroup() %>%
rename(
Answer = !!sym(var),
`Prop (SE)` = Prop_se,
`Prop (Lower CI 95%)` = Prop_low,
`Prop (Upper CI 95%)` = Prop_upp,
`Prop (CV)` = Prop_cv
) %>%
mutate(
Variable = var,
`Variable Label` = var_label,
Answer = as.character(Answer),
Answer = recode(
Answer,
`0` = "No",
`1` = "Yes",
.default = Answer
),
Prop = Prop*100,
`Prop (SE)` = `Prop (SE)`*100,
`Prop (Lower CI 95%)` = `Prop (Lower CI 95%)`*100,
`Prop (Upper CI 95%)`= `Prop (Upper CI 95%)`*100
) %>%
select(Variable,`Variable Label`, everything())
},
error = function(e) {
warning("Error summarising ", var, ": ", e$message)
tibble(
Variable           = var,
`Variable Label`   = var_label,
Answer             = NA_character_,
Prop               = NA_real_,
`Prop(SE)`         = NA_real_,
`Prop (Lower CI 95%)`= NA_real_,
`Prop (Upper CI 95%)`= NA_real_,
`Prop(CV)`         = NA_real_,
TotalRespond       = NA_integer_,
TotalNA            = NA_integer_
)
}
)
}
calculateCrossTab <- function(var, group, design, filter_expr = NULL){
f <- rlang::enquo(filter_expr)
df <- design %>%
drop_na(!!sym(var), !!sym(group)) %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) }
var_label <- attr(design$variables[[var]], "label")
group_label <- attr(design$variables[[group]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
if (is.null(group_label)) group_label <- "No Label Specified"
n_levels_var <- n_distinct(df$variables[[var]])
n_levels_grp <- n_distinct(df$variables[[group]])
if (nrow(df) == 0 || n_levels_var < 2 || n_levels_grp < 2) {
return(tibble::tibble(
Variable = var,
`Variable Label` = var_label,
`Grouping Variable` = group,
`Group Label` = group_label,
`Group Levels` = NA,
`Variable Levels` = NA,
Count = NA_real_,
`Count(SE)` = NA_real_,
`Count (Lower CI 95%)` = NA_real_,
`Count (Upper CI 95%)` = NA_real_,
`Count(CV)` = NA_real_
))
}
df %>%
survey_count(!!sym(group), !!sym(var), name = 'Count', vartype = c("se", "ci", "cv")) %>%
mutate(
Variable = var,
`Grouping Variable` = group,
`Variable Label` = var_label,
`Group Label` = group_label
) %>%
rename(
`Variable Levels` = !!sym(var),
`Group Levels` = !!sym(group),
`Count(SE)` = Count_se,
`Count (Lower CI 95%)` = Count_low,
`Count (Upper CI 95%)` = Count_upp,
`Count(CV)` = Count_cv
) %>%
mutate(
`Variable Levels` = recode(as.character(`Variable Levels`), `0` = "No", `1` = "Yes"),
`Group Levels` = recode(as.character(`Group Levels`), `0` = "No", `1` = "Yes")
) %>%
select(Variable,`Variable Label`,`Grouping Variable`, `Group Label`, `Group Levels`, `Variable Levels`, everything())
}
calculatePropGrouped <- function(var, group, design, filter_expr = NULL) {
f <- rlang::enquo(filter_expr)
var_label <- attr(design$variables[[var]], "label")
group_label <- attr(design$variables[[group]], "label")
if (is.null(var_label)) var_label <- "No Label Specified"
if (is.null(group_label)) group_label <- "No Label Specified"
tryCatch(
{
design %>%
{ if (rlang::quo_is_null(f)) . else filter(., !!f) } %>%
drop_na(!!sym(var), !!sym(group)) %>%
group_by(!!sym(group),!!sym(var) ) %>%
summarise(
Prop = survey_prop(x = !!sym(var), na.rm = TRUE, prop_method = "xlogit", vartype= c("se", "ci", "cv"))
) %>%
ungroup() %>%
mutate(
Variable = var,
`Grouping Variable` = group,
`Variable Label` = var_label,
`Group Label` = group_label
) %>%
rename(
`Variable Levels` = !!sym(var),
`Group Levels` = !!sym(group),
`Prop(SE)` = Prop_se,
`Prop (Lower CI 95%)` = Prop_low,
`Prop (Upper CI 95%)` = Prop_upp,
`Prop(CV)` = Prop_cv
) %>%
mutate(
`Variable Levels` = recode(as.character(`Variable Levels`), `0` = "No", `1` = "Yes"),
`Group Levels` = recode(as.character(`Group Levels`), `0` = "No", `1` = "Yes"),
Prop = Prop*100,
`Prop (SE)` = `Prop (SE)`*100,
`Prop (Lower CI 95%)` = `Prop (Lower CI 95%)`*100,
`Prop (Upper CI 95%)`= `Prop (Upper CI 95%)`*100
) %>%
select(Variable,`Variable Label`,`Grouping Variable`, `Group Label`, `Group Levels`, `Variable Levels`, everything())
},
error = function(e) {
warning("Error summarising ", var, ": ", e$message)
tibble(
Variable           = var,
`Variable Label`   = var_label,
`Grouping Variable` =group,
`Group Label` = group_label,
`Group Levels`= NA_character_,
`Variable Levels` = NA_character_,
Prop               = NA_real_,
`Prop(SE)`         = NA_real_,
`Prop (Lower CI 95%)`= NA_real_,
`Prop (Upper CI 95%)`= NA_real_,
`Prop(CV)`         = NA_real_
)
}
)
}
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECProp)
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age18Plus == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECProp)
TEST <- df %>%
age1 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1)
age2 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17)
age3 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & SexTransactAge > 17)
summary(age1)
count(age1)
count(age2)
count(age3)
age1 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & !is.na(SexTransactAge))
count(age1)
count(age2)
count(age3)
age3 <- df %>%
filter(SexTransact == 1 & Age18Plus == 1 & SexTransactAge > 17 & !is.na(SexTransactAge))
count(age1)
count(age3)
dfTest1a <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age13to17 == 1                         ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
dfTest1b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17  ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
View(dfTest1a)
View(dfTest1b)
table(dfTest1a)
table(dfTest1b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1   ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge > 0  ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge < 24  ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge < 30 ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest2b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age18Plus == 1 & SexTransactAge < 18 ~ 1,
TRUE                                                 ~ 0
)
) %>%
select(CSEC)
table(dfTest2b)
dfTest1a <- df %>%
mutate(
CSEC = case_when(
is.na(SexTransact) | is.na(Age13to17) | is.na(Age18Plus) | is.na(SexTransactAge) ~ NA_real_,
SexTransact == 1 & Age13to17 == 1 ~ 1,
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17 ~ 1,
TRUE ~ 0
)
) %>%
select(CSEC)
table(dfTest1a)
dfTest1a <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age13to17 == 1 ~ 1,
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17 & !is.na(SexTransactAge) ~ 1,
TRUE ~ 0
)
) %>%
select(CSEC)
table(dfTest1a)
dfTest1b <- df %>%
mutate(
CSEC = case_when(
SexTransact == 1 & Age13to17 == 1 ~ 1,
SexTransact == 1 & Age18Plus == 1 & SexTransactAge <= 17  ~ 1,
TRUE ~ 0
)
) %>%
select(CSEC)
table(dfTest1b)
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECProp)
CSECCount <- c("SexTransact", "SexTransactType", "SexTransactTourist") %>%
map( ~ calculateCount(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & CSEC == 1
)
) %>%
list_rbind()
View(CSECProp)
View(CSECProp)
View(CSECProp)
View(CSECCount)
CSECCount <- c("SexTransact", "SexTransactType", "SexTransactTourist") %>%
map( ~ calculateCount(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1
)
) %>%
list_rbind()
CSECCount <- c("CSEC") %>%
map( ~ calculateCount(
var = .x,
design = vacsDesign,
filter_expr = Age13to17 == 1 & !is.na(SexTransact)
)
) %>%
list_rbind()
View(CSECProp)
View(CSECCount)
CSECProp <- c("CSEC") %>%
map( ~ calculateProp(
var = .x,
design = vacsDesign,
filter_expr = Age18Plus == 1 & !is.na(SexTransact)
)
) %>%
list_rbind
View(CSECCount)
View(CSECProp)
